package com.karandev.util.net.tcp;

import com.karandev.util.net.TCP;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.atomic.AtomicReference;

public class TcpIsOpenTest {
    private static final String HOST = "localhost";
    private int m_port;
    private ExecutorService m_threadPool;
    private ServerSocket m_serverSocket;
    private final AtomicReference<Throwable> m_exception = new AtomicReference<>();

    private void serverCallback()
    {
        try {
            m_serverSocket = new ServerSocket(0);
            m_port = m_serverSocket.getLocalPort();
            m_serverSocket.accept();
        }
        catch (IOException ex) {
            m_exception.set(ex);
        }
    }

    @BeforeEach
    public void setUp()
    {
        m_threadPool = Executors.newSingleThreadExecutor();
        m_threadPool.execute(this::serverCallback);
    }

    @Test
    public void givenSocket_whenOpen_returnTrue()
    {
        try {
            Thread.sleep(200);
            var socket = new Socket(HOST, m_port);
            var tcp = new TCP(socket);

            Assertions.assertTrue(tcp.isOpen());
        } catch (IOException | InterruptedException e) {
            e.printStackTrace();
        }
    }

    @Test
    public void givenSocket_whenNotAvailable_returnFalse()
    {
        try {
            Thread.sleep(200);
            var socket = new Socket(HOST, m_port);
            var tcp = new TCP(socket);

            socket.close();
            Assertions.assertFalse(tcp.isOpen());
        } catch (IOException | InterruptedException e) {
            e.printStackTrace();
        }
    }

    @AfterEach
    public void tearDown() throws IOException
    {
        Assertions.assertNull(m_exception.get());
        m_serverSocket.close();
        m_threadPool.shutdownNow();
    }
}
